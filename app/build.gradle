apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-android'
apply plugin: 'io.github.aliyun-sls'

//apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.aliyun.sls.android.producer"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        buildConfigField "boolean", "CONFIG_ENABLE", project.hasProperty("CONFIG_ENABLE") ? "${CONFIG_ENABLE}" : "false"
        buildConfigField "String", "PLUGIN_APPID", project.hasProperty("PLUGIN_APPID") ? "\"${PLUGIN_APPID}\"" : "\"\""
        buildConfigField "String", "END_POINT", project.hasProperty("END_POINT") ? "\"${END_POINT}\"" : "\"\""
        buildConfigField "String", "LOG_PROJECT", project.hasProperty("LOG_PROJECT") ? "\"${LOG_PROJECT}\"" : "\"\""
        buildConfigField "String", "LOG_STORE", project.hasProperty("LOG_STORE") ? "\"${LOG_STORE}\"" : "\"\""
        buildConfigField "String", "ACCESS_KEYID", project.hasProperty("ACCESS_KEYID") ? "\"${ACCESS_KEYID}\"" : "\"\""
        buildConfigField "String", "ACCESS_KEY_SECRET", project.hasProperty("ACCESS_KEY_SECRET") ? "\"${ACCESS_KEY_SECRET}\"" : "\"\""
        buildConfigField "String", "ACCESS_KEY_TOKEN", project.hasProperty("ACCESS_KEY_TOKEN") ? "\"${ACCESS_KEY_TOKEN}\"" : "\"\""
        buildConfigField "String", "NETWORK_SECKEY", project.hasProperty("NETWORK_SECKEY") ? "\"${NETWORK_SECKEY}\"" : "\"\""
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your app.
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    sourceSets {
        main.jniLibs.srcDirs = ['libs']
        main.java.srcDirs += 'src/main/kotlin'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

//repositories {
//    flatDir {
//        dirs 'libs'
//    }
//}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation("com.squareup.okhttp3:okhttp:3.11.0")
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'

    implementation project(':aliyun_sls_android_producer')
    implementation project(':aliyun_sls_android_core')
    implementation project(':aliyun_sls_android_ot')
    implementation project(':aliyun_sls_android_crashreporter')
    implementation project(':aliyun_sls_android_blockdetection')
    implementation project(':aliyun_sls_android_network_diagnosis')
    implementation project(':aliyun_sls_android_trace')
    implementation project(':aliyun_sls_android_okhttp')
    implementation project(':aliyun_sls_android_ot_ktx')
    implementation project(':aliyun_sls_android_otel_common')
//    implementation project(':webview_instrumentation')

//    implementation 'io.github.aliyun-sls:aliyun-log-android-sdk:2.7.0@aar'
//    implementation 'io.github.aliyun-sls:sls-android-core:1.0.8@aar'
//    implementation 'io.github.aliyun-sls:sls-android-ot:1.0.8.1@aar'
//    implementation 'io.github.aliyun-sls:sls-android-ot-ktx:1.0.1@aar'
//    implementation 'io.github.aliyun-sls:sls-android-network-diagnosis:2.1.0@aar'
//    implementation 'io.github.aliyun-sls:android-crashreporter:1.0.0@aar'
//    implementation 'io.github.aliyun-sls:android-exporter-otlp:1.0.0@aar'
//    implementation 'io.github.aliyun-sls:android-otel-common:1.0.0@aar'
//    implementation 'io.github.aliyun-sls:sls-android-blockdetection:1.0.3.1@aar'
//    implementation 'io.github.aliyun-sls:sls-android-trace:1.0.7@aar'
//    implementation 'io.github.aliyun-sls:sls-android-okhttp:1.0.7.1@aar'
//    implementation 'io.github.aliyun-sls:sls-android-webview-instrumentation:1.1.0@aar'
//    // sls-android-webview-instrumentation 需要
//    implementation 'org.jsoup:jsoup:1.13.1'

    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation 'androidx.navigation:navigation-fragment:2.3.5'
    implementation 'androidx.navigation:navigation-ui:2.3.5'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'


    // provided to assist with synchronizing versions of dependencies
    implementation(platform("io.opentelemetry:opentelemetry-bom:1.22.0"))
    // apis
    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-context")
    implementation("io.opentelemetry:opentelemetry-api-logs")
    // api extensions
    implementation("io.opentelemetry:opentelemetry-extension-kotlin")
    // sdks
    implementation('io.opentelemetry:opentelemetry-sdk')
    implementation('io.opentelemetry:opentelemetry-sdk-logs')
    // semantic conventions
    implementation("io.opentelemetry:opentelemetry-semconv")
    // exporters
    implementation("io.opentelemetry:opentelemetry-exporter-otlp")
//    implementation("io.opentelemetry:opentelemetry-exporter-otlp-logs")

//    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
